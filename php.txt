问：在php中定义常量时，const和define的区别？

 

答：使用const使得代码简单易读，const本身就是一个语言结构，而define是一个函数。另外const在编译时要比define快很多。

1、const用于类成员变量的定义，一经定义，不可修改。Define不可以用于类成员变量的定义，可用于全局常量。

2、Const可在类中使用，define不能

3、Const不能再条件语句中定义常量



__LINE__	文件中的当前行号。
__FILE__	文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。自 PHP 4.0.2 起，__FILE__ 总是包含一个绝对路径（如果是符号连接，则是解析后的绝对路径），而在此之前的版本有时会包含一个相对路径。
__DIR__	文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。它等价于 dirname(__FILE__)。除非是根目录，否则目录中名不包括末尾的斜杠。（PHP 5.3.0中新增） =
__FUNCTION__	函数名称（PHP 4.3.0 新加）。自 PHP 5 起本常量返回该函数被定义时的名字（区分大小写）。在 PHP 4 中该值总是小写字母的。
__CLASS__	类的名称（PHP 4.3.0 新加）。自 PHP 5 起本常量返回该类被定义时的名字（区分大小写）。在 PHP 4 中该值总是小写字母的。类名包括其被声明的作用区域（例如 Foo\Bar）。注意自 PHP 5.4 起 __CLASS__ 对 trait 也起作用。当用在 trait 方法中时，__CLASS__ 是调用 trait 方法的类的名字。
__TRAIT__	Trait 的名字（PHP 5.4.0 新加）。自 PHP 5.4 起此常量返回 trait 被定义时的名字（区分大小写）。Trait 名包括其被声明的作用区域（例如 Foo\Bar）。
__METHOD__	类的方法名（PHP 5.0.0 新加）。返回该方法被定义时的名字（区分大小写）。
__NAMESPACE__	当前命名空间的名称（区分大小写）。此常量是在编译时定义的（PHP 5.3.0 新增）。


数组
array_change_key_case ― 返回字符串键名全为小写或大写的数组
array_chunk ― 将一个数组分割成多个
array_column ― 返回数组中指定的一列
array_combine ― 创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值
array_count_values ― 统计数组中所有的值出现的次数
array_diff_assoc ― 带索引检查计算数组的差集
array_diff_key ― 使用键名比较计算数组的差集
array_diff_uassoc ― 用用户提供的回调函数做索引检查来计算数组的差集
array_diff_ukey ― 用回调函数对键名比较计算数组的差集
array_diff ― 计算数组的差集
array_fill_keys ― 使用指定的键和值填充数组
array_fill ― 用给定的值填充数组
array_filter ― 用回调函数过滤数组中的单元
array_flip ― 交换数组中的键和值
array_intersect_assoc ― 带索引检查计算数组的交集
array_intersect_key ― 使用键名比较计算数组的交集
array_intersect_uassoc ― 带索引检查计算数组的交集，用回调函数比较索引
array_intersect_ukey ― 用回调函数比较键名来计算数组的交集
array_intersect ― 计算数组的交集
array_key_exists ― 检查给定的键名或索引是否存在于数组中
array_keys ― 返回数组中部分的或所有的键名
array_map ― 为数组的每个元素应用回调函数
array_merge_recursive ― 递归地合并一个或多个数组
array_merge ― 合并一个或多个数组
array_multisort ― 对多个数组或多维数组进行排序
array_pad ― 用值将数组填补到指定长度
array_pop ― 将数组最后一个单元弹出（出栈）
array_product ― 计算数组中所有值的乘积
array_push ― 将一个或多个单元压入数组的末尾（入栈）
array_rand ― 从数组中随机取出一个或多个单元
array_reduce ― 用回调函数迭代地将数组简化为单一的值
array_replace_recursive ― 使用传递的数组递归替换第一个数组的元素
array_replace ― 使用传递的数组替换第一个数组的元素
array_reverse ― 返回一个单元顺序相反的数组
array_search ― 在数组中搜索给定的值，如果成功则返回相应的键名
array_shift ― 将数组开头的单元移出数组
array_slice ― 从数组中取出一段
array_splice ― 把数组中的一部分去掉并用其它值取代
array_sum ― 计算数组中所有值的和
array_udiff_assoc ― 带索引检查计算数组的差集，用回调函数比较数据
array_udiff_uassoc ― 带索引检查计算数组的差集，用回调函数比较数据和索引
array_udiff ― 用回调函数比较数据来计算数组的差集
array_uintersect_assoc ― 带索引检查计算数组的交集，用回调函数比较数据
array_uintersect_uassoc ― 带索引检查计算数组的交集，用回调函数比较数据和索引
array_uintersect ― 计算数组的交集，用回调函数比较数据
array_unique ― 移除数组中重复的值
array_unshift ― 在数组开头插入一个或多个单元
array_values ― 返回数组中所有的值
array_walk_recursive ― 对数组中的每个成员递归地应用用户函数
array_walk ― 使用用户自定义函数对数组中的每个元素做回调处理
array ― 新建一个数组
arsort ― 对数组进行逆向排序并保持索引关系
asort ― 对数组进行排序并保持索引关系
compact ― 建立一个数组，包括变量名和它们的值
count ― 计算数组中的单元数目或对象中的属性个数
current ― 返回数组中的当前单元
each ― 返回数组中当前的键／值对并将数组指针向前移动一步
end ― 将数组的内部指针指向最后一个单元
extract ― 从数组中将变量导入到当前的符号表
in_array ― 检查数组中是否存在某个值
key_exists ― 别名 array_key_exists
key ― 从关联数组中取得键名
krsort ― 对数组按照键名逆向排序
ksort ― 对数组按照键名排序
list ― 把数组中的值赋给一些变量
natcasesort ― 用“自然排序”算法对数组进行不区分大小写字母的排序
natsort ― 用“自然排序”算法对数组排序
next ― 将数组中的内部指针向前移动一位
pos ― current 的别名
prev ― 将数组的内部指针倒回一位
range ― 建立一个包含指定范围单元的数组
reset ― 将数组的内部指针指向第一个单元
rsort ― 对数组逆向排序
shuffle ― 将数组打乱
sizeof ― count 的别名
sort ― 对数组排序
uasort ― 使用用户自定义的比较函数对数组中的值进行排序并保持索引关联
uksort ― 使用用户自定义的比较函数对数组中的键名进行排序
usort ― 使用用户自定义的比较函数对数组中的值进行排序



字符串


addcslashes ― 以 C 语言风格使用反斜线转义字符串中的字符
addslashes ― 使用反斜线引用字符串
bin2hex ― 函数把包含数据的二进制字符串转换为十六进制值
chop ― rtrim 的别名
chr ― 返回指定的字符
chunk_split ― 将字符串分割成小块
convert_cyr_string ― 将字符由一种 Cyrillic 字符转换成另一种
convert_uudecode ― 解码一个 uuencode 编码的字符串
convert_uuencode ― 使用 uuencode 编码一个字符串
count_chars ― 返回字符串所用字符的信息
crc32 ― 计算一个字符串的 crc32 多项式
crypt ― 单向字符串散列
echo ― 输出一个或多个字符串
explode ― 使用一个字符串分割另一个字符串
fprintf ― 将格式化后的字符串写入到流
get_html_translation_table ― 返回使用 htmlspecialchars 和 htmlentities 后的转换表
hebrev ― 将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew）
hebrevc ― 将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew），并且转换换行符
hex2bin ― 转换十六进制字符串为二进制字符串
html_entity_decode ― Convert all HTML entities to their applicable characters
htmlentities ― Convert all applicable characters to HTML entities
htmlspecialchars_decode ― 将特殊的 HTML 实体转换回普通字符
htmlspecialchars ― Convert special characters to HTML entities
implode ― 将一个一维数组的值转化为字符串
join ― 别名 implode
lcfirst ― 使一个字符串的第一个字符小写
levenshtein ― 计算两个字符串之间的编辑距离
localeconv ― Get numeric formatting information
ltrim ― 删除字符串开头的空白字符（或其他字符）
md5_file ― 计算指定文件的 MD5 散列值
md5 ― 计算字符串的 MD5 散列值
metaphone ― Calculate the metaphone key of a string
money_format ― 将数字格式化成货币字符串
nl_langinfo ― Query language and locale information
nl2br ― 在字符串所有新行之前插入 HTML 换行标记
number_format ― 以千位分隔符方式格式化一个数字
ord ― 返回字符的 ASCII 码值
parse_str ― 将字符串解析成多个变量
print ― 输出字符串
printf ― 输出格式化字符串
quoted_printable_decode ― 将 quoted-printable 字符串转换为 8-bit 字符串
quoted_printable_encode ― 将 8-bit 字符串转换成 quoted-printable 字符串
quotemeta ― 转义元字符集
rtrim ― 删除字符串末端的空白字符（或者其他字符）
setlocale ― 设置地区信息
sha1_file ― 计算文件的 sha1 散列值
sha1 ― 计算字符串的 sha1 散列值
similar_text ― 计算两个字符串的相似度
soundex ― Calculate the soundex key of a string
sprintf ― Return a formatted string
sscanf ― 根据指定格式解析输入的字符
str_getcsv ― 解析 CSV 字符串为一个数组
str_ireplace ― str_replace 的忽略大小写版本
str_pad ― 使用另一个字符串填充字符串为指定长度
str_repeat ― 重复一个字符串
str_replace ― 子字符串替换
str_rot13 ― 对字符串执行 ROT13 转换
str_shuffle ― 随机打乱一个字符串
str_split ― 将字符串转换为数组
str_word_count ― 返回字符串中单词的使用情况
strcasecmp ― 二进制安全比较字符串（不区分大小写）
strchr ― 别名 strstr
strcmp ― 二进制安全字符串比较
strcoll ― 基于区域设置的字符串比较
strcspn ― 获取不匹配遮罩的起始子字符串的长度
strip_tags ― 从字符串中去除 HTML 和 PHP 标记
stripcslashes ― 反引用一个使用 addcslashes 转义的字符串
stripos ― 查找字符串首次出现的位置（不区分大小写）
stripslashes ― 反引用一个引用字符串
stristr ― strstr 函数的忽略大小写版本
strlen ― 获取字符串长度
strnatcasecmp ― 使用“自然顺序”算法比较字符串（不区分大小写）
strnatcmp ― 使用自然排序算法比较字符串
strncasecmp ― 二进制安全比较字符串开头的若干个字符（不区分大小写）
strncmp ― 二进制安全比较字符串开头的若干个字符
strpbrk ― 在字符串中查找一组字符的任何一个字符
strpos ― 查找字符串首次出现的位置
strrchr ― 查找指定字符在字符串中的最后一次出现
strrev ― 反转字符串
strripos ― 计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）
strrpos ― 计算指定字符串在目标字符串中最后一次出现的位置
strspn ― 计算字符串中全部字符都存在于指定字符集合中的第一段子串的长度。
strstr ― 查找字符串的首次出现
strtok ― 标记分割字符串
strtolower ― 将字符串转化为小写
strtoupper ― 将字符串转化为大写
strtr ― 转换指定字符
substr_compare ― 二进制安全比较字符串（从偏移位置比较指定长度）
substr_count ― 计算字串出现的次数
substr_replace ― 替换字符串的子串
substr ― 返回字符串的子串
trim ― 去除字符串首尾处的空白字符（或者其他字符）
ucfirst ― 将字符串的首字母转换为大写
ucwords ― 将字符串中每个单词的首字母转换为大写
vfprintf ― 将格式化字符串写入流
vprintf ― 输出格式化字符串
vsprintf ― 返回格式化字符串
wordwrap ― 打断字符串为指定数量的字串